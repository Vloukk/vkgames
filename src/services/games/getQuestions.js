import { supabase } from "../../utils/supabaseClient";

/**
 * R√©cup√®re 10 questions al√©atoires bas√©es sur les th√®mes s√©lectionn√©s.
 * @param {string[]} selectedThemes - Liste des noms de th√®mes choisis.
 * @returns {Promise<object[]>} - Liste des questions.
 */
export const getQuestions = async (selectedThemes) => {
  if (!selectedThemes || selectedThemes.length === 0) {
    console.error("‚ùå Aucun th√®me s√©lectionn√© !");
    return [];
  }

  try {
    console.log("üîç Recherche des ID pour les th√®mes :", selectedThemes);

    // √âtape 1 : R√©cup√©rer les `id` des th√®mes s√©lectionn√©s
    const { data: themes, error: themesError } = await supabase
      .from("themes")
      .select("id")
      .in("name", selectedThemes);

    if (themesError) throw themesError;
    if (!themes || themes.length === 0) {
      console.warn("‚ö†Ô∏è Aucun th√®me trouv√© pour :", selectedThemes);
      return [];
    }

    const themeIds = themes.map((t) => t.id);
    console.log("‚úÖ ID des th√®mes r√©cup√©r√©s :", themeIds);

    // √âtape 2 : R√©cup√©rer les questions li√©es aux th√®mes s√©lectionn√©s
    const { data: questions, error: questionsError } = await supabase
      .from("questions")
      .select("*")
      .in("theme_id", themeIds)
      .order("random") // Assure un tirage al√©atoire
      .limit(10);

    if (questionsError) throw questionsError;

    console.log("‚úÖ Questions r√©cup√©r√©es :", questions);
    return questions;
  } catch (error) {
    console.error("‚ùå Erreur dans getQuestions :", error);
    return [];
  }
};
