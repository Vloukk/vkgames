import { useState, useEffect } from "react";
import { supabase } from "@/utils/supabaseClient";
import useGameStore from "@/store/quizz/gameStore";

export function useThemes(gameId, playerId) {
    const [themes, setThemes] = useState([]);
    const [selectedTheme, setSelectedTheme] = useState(null);
    const game = useGameStore((state) => state.game);

    // ‚úÖ 1. R√©cup√©rer les th√®mes depuis les r√®gles du jeu
    useEffect(() => {
        console.log("üì° [DEBUG] game.rules.availableThemes :", game?.rules?.availableThemes);
        if (game?.rules?.availableThemes) {
            setThemes(game.rules.availableThemes);
        }
    }, [game?.rules?.availableThemes]);    

    // ‚úÖ 2. R√©cup√©rer le th√®me d√©j√† s√©lectionn√© par le joueur
    useEffect(() => {
        if (!playerId) return;
    
        async function fetchSelectedTheme() {
            console.log("üîç V√©rification du th√®me s√©lectionn√© pour le joueur :", playerId);
    
            const { data, error } = await supabase
                .from("players")
                .select("selected_theme_id")
                .eq("uuid", playerId)
                .single();
    
            if (error) {
                console.error("‚ùå Erreur r√©cup√©ration du th√®me du joueur :", error);
                return;
            }
    
            console.log("üéØ [DEBUG] Th√®me s√©lectionn√© r√©cup√©r√© :", data?.selected_theme_id);
    
            if (data?.selected_theme_id) {
                setSelectedTheme(data.selected_theme_id);
            }
        }
    
        fetchSelectedTheme();
    }, [playerId]);    

    // ‚úÖ 3. √âcouter les mises √† jour en temps r√©el sur `selected_theme_id`
    useEffect(() => {
        if (!gameId) return;

        console.log("üì° [DEBUG] Abonnement Realtime pour les th√®mes du jeu :", gameId);

        const channel = supabase
            .channel(`theme_selection_${gameId}`) // Canal unique par partie
            .on(
                "postgres_changes", 
                { 
                    event: "UPDATE", 
                    schema: "public", 
                    table: "players",
                    filter: `game_id=eq.${gameId}`
                },
                (payload) => {
                    console.log("üü¢ [REALTIME] Mise √† jour d√©tect√©e :", payload.new.selected_theme_id);
                    
                    // Si c'est le joueur actuel, mettre √† jour son th√®me
                    if (payload.new.uuid === playerId) {
                        setSelectedTheme(payload.new.selected_theme_id);
                    }
                }
            )
            .subscribe();

        return () => {
            supabase.removeChannel(channel);
        };
    }, [gameId, playerId]);

    // ‚úÖ 4. Fonction pour s√©lectionner un th√®me
    async function selectTheme(themeName) {
        console.log("üî• [DEBUG] Th√®me s√©lectionn√© :", themeName);

        // üîç R√©cup√©rer l'ID du th√®me
        const { data: themeData, error: themeError } = await supabase
            .from("themes")
            .select("id")
            .eq("name", themeName)
            .single();

        if (themeError) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration du th√®me :", themeError);
            return;
        }

        const themeId = themeData?.id;
        if (!themeId) {
            console.error("‚ùå Aucun ID trouv√© pour le th√®me :", themeName);
            return;
        }

        // üîÑ Mettre √† jour le th√®me s√©lectionn√© par le joueur
        const { error: updateError } = await supabase
            .from("players")
            .update({ selected_theme_id: themeId })
            .eq("uuid", playerId);

        if (updateError) {
            console.error("‚ùå Erreur lors de la mise √† jour du th√®me du joueur :", updateError);
            return;
        }

        console.log("‚úÖ Th√®me mis √† jour avec succ√®s !");
        setSelectedTheme(themeId);
    }

    return { themes, selectedTheme, selectTheme };
}
